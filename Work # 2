class Student:
    def __init__(self, name, surname, gender):
        self.name = name
        self.surname = surname
        self.gender = gender
        self.finished_courses = []  # Завершенные курсы
        self.courses_in_progress = []  # Курсы в процессе изучения
        self.grades = {}  # Оценки за домашние задания

    def rate_lectors(self, lectors, course, grade):
        if isinstance(lectors, Lectors) and course in self.courses_in_progress and course in lectors.courses_attached:
            if course in lectors.grades:
                lectors.grades[course] += [grade]
            else:
                lectors.grades[course] = [grade]
        else:
            print("Лектор или курс не найден")


class Mentor:
    def __init__(self, name, surname):
        self.name = name
        self.surname = surname
        self.courses_attached = []  # Курсы, на которые подписан преподаватель


class Lectors(Mentor):
    def __init__(self, name, surname):
        super().__init__(name, surname)
        self.courses_attached = []
        self.grades = {}


class Reviewer(Mentor):
    def __init__(self, name, surname):
        super().__init__(name, surname)

    def rate_hw(self, student, course, grade):
        if isinstance(student, Student) and course in self.courses_attached and course in student.courses_in_progress:
            # Проверяем, существует ли студент, есть ли он на курсе преподавателя и есть ли он на курсе студента
            if course in student.grades:
                student.grades[course] += [grade]
            else:
                student.grades[course] = [grade]
        else:
            print("Студент или курс не найден")


student1 = Student('Алексей', 'Алексеевич', 'Мужчина')
student1.courses_in_progress += ['Python', 'Git']

lector1 = Lectors("Сергей", "Сергеевич")
lector1.courses_attached += ['Python']

student1.rate_lectors(lector1, 'Python', 10)

print(lector1.grades)
